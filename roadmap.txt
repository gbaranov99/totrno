Totrno is becoming more and more of a reality, so I think it is as good a time as any to plan out my next steps

What I have so far:
	Token user authentication
	A simple file api
	A simple front end with a basic description

What I want to get:
	Production set up
		Making sure website actually runs in production
		Storing user data between file upgrades
			(Do I need to have all of my backend set before I can do that?)
			How do db migrates work?
		Forwarding from gbaranov to totrno contact page

	Frontend	
		Pressing enter switches from username to password to submitting form
		Handling failed user requests, mostly login and registration
		Router forwarding depending on user login state
		Displaying the heirarchy of files and time logs associated
			Files being deleted when user presses the button
		Displaying user time tracked data: analytics
		A much better and more interactive landing page
		A better description and contact page
		A better interface for account information
			Including password changes, resets
		User interface for search
		User interface for calendar / dates
		Side nav menu that shows top 5 Root, Recent and Popular directories

	Backend
		A hierarchical file system
		Time logs attached to the file system
		JWT user authentication
		User email authentication
		Checks to manage user input size and number of requests
		Make requests not show the file number
			Have each user have their own file number
			At some point, create tables for each user (?)

	Sending out the app into the real world
		Post it on subreddits or hackernews
	
	Full device compatability
		Make the app usable on both a desktop brower and on a phone browser
		Enable phone notifications and maybe location data

I hope I can finish most of this stuff by december, although I may need until january
But by the start of next semester, if I don't have a product I am happy with, 
I put up what I have and begin in earnest searching for a real internship / real experience
Or begin a new project that I feel is more interesting


Update 11/17
	File herirarchies are working surprisingly well
	Current problems to fix with them however:
		Delete only deletes on second press, which might be a problem with data transfer, but add works
		System currently gets all files after a single delete or add, when it should not have to get data from server after first and only get
		Indentation is a bit messed up, pushes delete off screen
	If I can get time logs to kind of work, I will be making progress
	But this shit is taking a fucking while
	I might be done with something kind of good by january
	But I am honestly not even sure

	It is hard to get getFile to work just by itself
	It works for no heirarchies
	But when a heirarchy is introduced, it becomes less obvious where to put the file
	I could have it find the parent and insert in the tree in vue
	It would make it easier on the server at the cost of making it harder for me to program by a long shot


	The ideal solution for the file thing
	Is to import once at the start of the program, and not touch it again
	What this means is creating a paramter to keep track of descending path
	And for insert to insert it at the end of the path in file_set
	And for delete to delete a file from the current file_set

	I will do that after timers however

	I will do timers right now, to switch it up

	What is left, roughly:
		Create timers and assoicated them with files
		Fix heirarchy query to work in vue through path list, ie only get data from api once
		Display error messages if user attempts to add file without contents
		Enable file editing
		Get search to work
		Make file layout more advanced
		Get calendar to work
		Get user authentication to work with tokens
		See if I need to change file structure to something better (single root node or mptt)
		File randomly closes if a new file is added passed a certain depth
		General file formatting
	
	File and time logging format fully planned out:
		At the top is a header type area
			On the left is the full current directory, from top level folder
			On the right are the files and their running timers
			If there are more than one (later implementation), creates drop down menu of timers
			Clicking on a file in the directory or in the timer path opens to that page
		In the middle, at launch is just the list of all top level files, all folders closed
			Could eventually have a state for file directories so user decides if they want to have folders preserve state through reloads
			On the leftmost edge is a open file symbol
				Pressing it either shows or hides sub files
			Right of open file symbol is the title
				Title part trails off after 30 characters
				Pressing the title opens the current file as a new directory, showing all sub folders as top level folders
			Right of title is the start of content section
				Also trails off after 30 characters
				Pressing it opens a right pane for editing the file
			Right of content is a clock that opens time tracking options
			Right of clock is a tag button
				Pressing it creates a drop down list of tags and allows creating a new one
			Right of tag is a calendar
				Pressing it opens a mini calendar and clock to choose a due date and time
				Eventually could also implement it 
			On rightmost edge is an x 
				Requires user confirmation to delete all files
				Confirmation can be disabled for childrenless files and all files in settings
	
	Later:
		Search drop down
		Calendar screen
		Planning ahead
		User analytics
		Advanced settings
		Customizable sidebar: Commonly used files / most recently used / top level / frequent tags / next 7 days
		Better file structure / user / api
		Exporting data to json or xml
		Custom color schemes
		Mobile friendly view, sliding out sidebar and slight redesign of main format, content opens out and slide gestures

Update 11/26:
	Draggable files
	Show current timer data up top
	Expand file content when user presses on it
		Right half of the screen
	Expand time logs on right if user presses settings
	Updating time log data on user submit
	Serve icons from my computer, to make it work offline

	Add file after deleting doesn't work ideally
	sometimes
	Idk

	
	There is so much stuff I don't know how to do yet
	I think the first thing to figure out is vuedraggable
	Then, the uploading
	Then the right half of screen expansion on button click
	Then the expanding buttons / making changes automatic without an upload button
	


	Effectively all I want for the drag and drop
	Is to change the parent of a single file
	Which would not change any of the sub files
	And this is not a very hard concept
	But it is seemingly impossible to get it to work with vue and vuetify

	The only real problem I currently face is that
	two:
		I need a placeholder to be able to drag anything into anything's subtask
		And the formatting is off for the drag and drop
			Instead of being
		I also need to decide how sorting is going to work

	Okay I now kind of have a partial solution for adding items to any row
	Now I just need to get indentation to work

	I am honestly pretty close
	I just need to get indentation set up
	And I can say I have made a bit of progress


	Okay I have solved many of my issues
	
	Indentation works pretty well and so does
	Draggable in general
	Now I need to integrate it with 

	I wonder if the expanded value is worth it
	idk what that meant
	But I wonder if it is worth it to add an opened setting to each item

	I definitely will need to modify my backend at some point
	Because I can't have that much shit in my allFiles
	allFiles cannot have any subset files, or I get O(n!) file sizes, which is pretty unreasonable
	I think right now my system is okay other than that

	I think it would be useful to have an open or closed state
	It would make it more customizable in the future if anything


Update 2019_12_01:
	Next steps:
	
	Get drag and drop/file moves to move the file around in api with patch method
		Should only really change when parent is altered

		Can maybe later add custom functionality to allow rearanging as a user wants
		But this is not a problem right now

	Update delete and update methods in store

	Create a functioning time tracking feature
		Create timer on front end
		Counts up when user presses start
		Ends when user closes it
		Saves a time log
	
	Adding a file to a new file does not allow it to be opened



	The parent thing works pretty well using the vuedraggable api
	However, there are sometimes bugs where a file moved from no parent kinda fail
		The problem seems to come from moving a file without no parent to have a parent
		If a file is moved from an above file, the parent is the next file instead of the current file

		This bug makes actually no fucking sense
		Apparently it was something with the key not working, but I think I fixed it
	
	Next problem is that delete doesn't work for files lower down on list
	Works now
	Was a problem with loops, using same variable for two different loops
	

Next steps:
	Remove username requirement from sign up
	
	Implement right half of screen content editing feature
	
	Implement time tracking data associated with files

	Right click / double click on title opens it as new root, with path displayed up top


Eventually:
	Better about page

	Better account page
		Eventually password reset and email verification
		Data extraction in json form
			Likely as text file (or whatever form json uses)
			Both todos and time data
	
	A useful right banner, with file shortcuts
		Frequently used / most used
		Most recently used
		Top level file names

	An archive option / mark off (in content section)

	Todo date
		Date and time selector
		Calendar that shows todos by date	

	Mobile view
		Right banner expands on button press up top
		Content is no longer on right half of screen, but takes up full screen
		Less indentation?
	
	Change file structure
		Maybe use hashed data instead of increasing numbers for file numbers
		Make so allFiles doesn't querry recursively
	
	See how it functions at scale on digital ocean
